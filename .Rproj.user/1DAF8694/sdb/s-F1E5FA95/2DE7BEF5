{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Data Visualization Portfolio\"  \nauthor: \"George W. Batten III\"\ndate: \"`r Sys.Date()`\"\noutput:\n  html_document:\n    theme: journal\n    highlight: zenburn\n    toc: true\n    toc_depth: 5\n---\n\n```{r global_options, include=FALSE}\nknitr::opts_chunk$set(fig.width=8, fig.height=6, fig.path='Figs/', echo=FALSE, warning=FALSE, message=FALSE, cache = TRUE)\n```\n<br><br><br><br>\n\nINTRODUCTION\n---\n<hr style=\"height:1px;border:none;color:#333;background-color:#333;\" />\n\nHumans think in terms of images and stories, and we have incredible abilities to find patterns in images.  Thus, I am energetically drawn towards data visualizations - they are a powerful means of distilling large data sets and communicating the stories drawn from data.  \n<br />\nFollowing are examples of visualizations I created.  My tool-of-choice is R, but in the processes of any data analysis and visualization, I may use other tools such as Excel, QGIS, SQL, HTML, or CSS. \n<br />\n\nThis portfolio is a living document.  Please check back from time to time and see what I've added.\n<br><br><br>\n<br><br><br>\n\nINTERACTIVE MAP\n--- \n<hr style=\"height:1px;border:none;color:#333;background-color:#333;\" />\n\nMaps of all kinds are a long-enduring passion of mine.  I get deep satisfaction creating interactive maps, where spreadsheets of numbers get transformed into beautiful, understandable visual patterns.  I use the JavaScript library _Leaflet_, via R, to create interactive maps.  In the following map, you can zoom in and out, scroll in any direction, select from several background maps, and choose the layers you wish to view.  Controls are hidden in the \"stacked layers\" icon at the top right of the map.  Hover over the icon to see options.  (To make a layer the top one, click it off and then on).  Clicking on each data point will produce a popup with additional information.  \n<br />\nThe following map shows all of the forest fires in Oregon from 2013 to 2015.  You can explore the geographic distribution of major causes of forest fires by showing individual layers.  For example, it is easy to see that lightning-caused fires are more prevalent in the southern and eastern parts of Oregon.  I've included a variety of base maps to use depending on the question you are exploring.  Using the \"Terrain\" map shows how difficult some fires must have been to fight because of steep, rugged slopes.   \n\n\n```{r, interactive_map, echo=FALSE, cache=FALSE}\n# import Oregon forest fire data\ndat <- read.csv(\"./data/ForestFiresOregon/FireList_edit.csv\",\n                stringsAsFactors = FALSE)\n# convert to lat/long to DMS\nlibrary(sp)\ndat$Latitude <- as.numeric(char2dms(dat$Latitude, \n                                    chd = \"°\", chm = \"'\", chs = \"\\\"\"))\ndat$Longitude <- as.numeric(char2dms(dat$Longitude, \n                                     chd = \"°\", chm = \"'\", chs = \"\\\"\"))\ndat <- dat[complete.cases(dat), ]\nnames(dat)[7:8] <- c(\"lat\", \"long\")\n\n\n# create fire SpatialPointsDataFrame\ncoords <- dat[, 7:8]\ngeodat <- SpatialPointsDataFrame(coords, dat)\n\n# create map\nlibrary(leaflet)\npopup <- paste0(\"<strong>Year: </strong>\", geodat$Fire.Year,\n                \"<br /><strong>Fire Name: </strong>\", geodat$Fire.Name)\n\nfillOpacity <- 1\n\nmap_colors <- c(\"#e41a1c\", \"#377eb8\", \"#4daf4a\", \"#984ea3\", \n                \"#ff7f00\", \"#ffd700\")\nmap_names <- c(\"All Fires\", \"Lightning\", \"Equipment Use\", \"Debris Burning\",\n               \"Smoking\", \"Arson\")\n        \nlightning <- dat[dat$General.Cause == \"Lightning\", ]\ncoords <- lightning[, 7:8]\nlightning <- SpatialPointsDataFrame(coords, lightning)\n\nequipment <- dat[dat$General.Cause == \"Equipment Use\", ]\ncoords <- equipment[, 7:8]\nequipment <- SpatialPointsDataFrame(coords, equipment)\n\ndebris_burning <- dat[dat$General.Cause == \"Debris Burning\", ]\ncoords <- debris_burning[, 7:8]\ndebris_burning <- SpatialPointsDataFrame(coords, debris_burning)\n\nsmoking <- dat[dat$General.Cause == \"Smoking\", ]\ncoords <- smoking[, 7:8]\nsmoking <- SpatialPointsDataFrame(coords, smoking)\n\narson <- dat[dat$General.Cause == \"Arson\", ]\ncoords <- arson[, 7:8]\narson <- SpatialPointsDataFrame(coords, arson)\n\nm <- leaflet(data = geodat) %>%\n        addTiles(group = \"OpenStreetMap\") %>%\n        addProviderTiles(\"Stamen.Toner\", group = \"Toner\") %>%\n        addProviderTiles(\"Stamen.TonerLite\", group = \"Toner Lite\") %>%  \n        addProviderTiles(\"CartoDB.Positron\", group = \"Positron\") %>%\n        addProviderTiles(\"CartoDB.DarkMatter\", group = \"Dark Matter\") %>%\n        addProviderTiles(\"Stamen.Terrain\", group = \"Terrain\") %>%\n        \n        addCircles(lng = ~long, lat = ~lat, radius = 2,  \n                   fillColor = \"#e41a1c\", fillOpacity = fillOpacity,\n                   color = \"#e41a1c\", group = \"All Fires\",\n                   popup = popup) %>%\n        \n        addCircles(data = lightning, lng = ~long, lat = ~lat, \n                             radius = 2,  \n                   fillColor = \"#377eb8\", fillOpacity = fillOpacity,\n                   color = \"#377eb8\", group = \"Lightning\",\n                   popup = popup) %>%\n        \n        addCircles(data = equipment, lng = ~long, lat = ~lat, \n                   radius = 2,  \n                   fillColor = \"#4daf4a\", fillOpacity = fillOpacity,\n                   color = \"#4daf4a\", group = \"Equipment Use\",\n                   popup = popup) %>%\n        \n        addCircles(data = debris_burning, lng = ~long, lat = ~lat, \n                   radius = 2,  \n                   fillColor = \"#984ea3\", fillOpacity = fillOpacity,\n                   color = \"#984ea3\", group = \"Debris Burning\",\n                   popup = popup) %>%\n        \n        addCircles(data = smoking, lng = ~long, lat = ~lat, \n                   radius = 2,  \n                   fillColor = \"#ff7f00\", fillOpacity = fillOpacity,\n                   color = \"#ff7f00\", group = \"Smoking\",\n                   popup = popup) %>%\n        \n        addCircles(data = arson, lng = ~long, lat = ~lat, \n                   radius = 2,  \n                   fillColor = \"#ffd700\", fillOpacity = fillOpacity,\n                   color = \"#ffd700\",  group = \"Arson\",\n                   popup = popup) %>%\n\n        addLegend(\"bottomright\", colors = map_colors, labels = map_names,\n                  title = \"Cause of Fire\",\n                  opacity = 0.8 ) %>%\n        \n        addLayersControl(\n                baseGroups = c(\"OpenStreetMap\", \"Toner\", \"Toner Lite\", \n                               \"Positron\", \"Dark Matter\", \"Terrain\"),\n                overlayGroups = c(\"All Fires\", \"Lightning\", \"Equipment Use\",\n                                  \"Debris Burning\", \"Smoking\", \"Arson\"),\n                options = layersControlOptions(collapsed = TRUE))\nm\n```\n\n<br><br><br>\n<br><br><br>\n\nGRAPHS\n---\n<hr style=\"height:1px;border:none;color:#333;background-color:#333;\" />\n\n###Interactive Time-series Graph\nTime-series graphs can show cyclical trends or changes after significant events.  The following graph shows the daily number of births in Quebec from 1977 to 1990. The graph includes a range selector beneath it which allows you to zoom in on the time range of interest.  Simply move the sliders on the left and right.\n\n```{r, interactive_timeseries, fig.width=8, fig.height=4, cache=FALSE, echo=FALSE}\nlibrary(dygraphs)\nlibrary(lubridate)\nlibrary(xts)\n\nbirths <- read.csv(\"./data/graphs/number-of-daily-births-in-quebec.csv\", \n                   stringsAsFactors = TRUE)\n\nbirths$Date <- mdy(births$Date)\n\nbirths_ts <- xts(births, births$Date)\n\ndygraph(births_ts, main = \"Number of Daily Births in Quebec (1977-1999)\", \n        ylab = \"Number of Births\") %>%\n        dyRangeSelector() %>%\n        dyShading(from = \"1977-01-01\", to = \"1977-12-31\") %>% \n        dyShading(from = \"1979-01-01\", to = \"1979-12-31\") %>%\n        dyShading(from = \"1981-01-01\", to = \"1981-12-31\") %>% \n        dyShading(from = \"1983-01-01\", to = \"1983-12-31\") %>%\n        dyShading(from = \"1985-01-01\", to = \"1985-12-31\") %>% \n        dyShading(from = \"1987-01-01\", to = \"1987-12-31\") %>%\n        dyShading(from = \"1989-01-01\", to = \"1989-12-31\")\n```\n<br><br><br>\n<br><br><br>\n\n###Moveable 3-D Graph\nAdding a third variable to a graph is often helpful, and while static 3-D graphs are possible, being able to rotate the graph to view it from any angle is superior.  Below is a 3-D plot of Fisher's classic iris data set (collected by Edgar Anderson) which includes sepal and petal measurements of three species.  I plotted sepal length, sepal width, and petal length on the X, Y, and Z axes, respectively, and color coded the species ( _Setosa_ = light blue, _Versicolor_ = blue, and _Virginica_ = light green).  To rotate, click anywhere on the graph and drag in any direction.  Zoom using your mouse scroll wheel. \n\n```{r, 3d_graph, cache=FALSE, echo=FALSE, fig.width=10, fig.height=8}\nlibrary(threejs)\ndata(iris)\nz <- iris[, 1]\nx <- iris[, 2]\ny <- iris[, 3]\n\npaint <- c(rep(\"#a6cee3\", 50), rep(\"#1f78b4\", 50), rep(\"#b2df8a\", 50))\nlabels <- c(rep(\"setosa\", 50), rep(\"versicolor\", 50), rep(\"virginica\", 50))\nscatterplot3js(x,y,z, color = paint, size = 1.5,\n               labels = labels, renderer = \"canvas\")\n```\n<br><br><br>\n<br><br><br>\n\n###Network Graph\n\nMany systems, whether biological, physical, or social are best represented as a network where features such as connectivity, complexity, and distance can illuminate many questions.  The following graph shows frequent associations between 62 dolphins off the coast of New Zealand (Lusseau et al. 2003). Hover over a node to see the name (or designation) of the dolphin, and drag nodes around to explore the network. Male dolphins are dark blue, female light blue, and those with unknown gender are orange.\n\n```{r social_network, echo=FALSE, cache=FALSE}\nlibrary(networkD3)\nnod <- read.csv(\"./data/Network Graph/dolphins_nodes.csv\", \n                stringsAsFactors = FALSE)\nnod <- nod[, 2:3]\n\nedg <- read.csv(\"./data/Network Graph/dolphins_edges.csv\", \n                stringsAsFactors = FALSE)\nedg <- edg[, c(1:2, 6)]\n\nforceNetwork(Links = edg, Nodes = nod,\n             Source = \"Source\", Target = \"Target\", Value = \"Weight\",\n             NodeID = \"Label\", Group = \"sex\",\n             opacity = 1, charge = -300,\n             fontsize = 10, height = 650, width = 1000)\n\n```\n<br><br><br>\n<br><br><br>\n\n###Scatter Plots\nStatic graphs are the bread and butter of data visualizations.  A simple scatter plot of 2 variables, say tree height vs tree diameter, makes the relationship concrete, and allows us to easily detect interesting outliers (e.g. the rather stout baobab tree).  \n<br />\nWhen I worked for the Pacific Northwest National Laboratory, our research focused on determining the number of young salmon that survived going through dams on the Columbia River.  We implanted tiny, acoustic transmitters in a sample (50,000!) of migrating fish, and listened for their unique codes as they approached the dams.  The sensors we used (hydrophones), were submerged in the water on the upstream face of the dams.  The problem was that dams make a lot of noise, and trying to hear an acoustic signal sent at very low power was difficult at useful distances.  We constructed shields (baffles) that blocked noise coming from or reflected off of the dams.  To test the baffles, two hydrophones were lowered in the water, one with a baffle, the other without, and a transmitter, mounted to a boat, was moved toward and away from the dam in a series of transects. The signal-to-noise ratio (SNR) was recorded each time a code was heard.  SNR is a good proxy for distance: higher SNRs imply the fish is close by.  \n<br />  \nThe following scatter plots show that baffles are effective at blocking noise, allowing detection of distant signals.  The top plot shows all detections and their SNR levels for the baffled and non-baffled hydrophones compared with the distance the \"fish\" was from the hydrophone. The second plot shows all detections and their distance from each hydrophone.\n\n\n```{r baffle_scatterplot, echo=FALSE}\nlibrary(ggplot2)\nlibrary(dplyr)\n# Hydrophone Data Import, Ordering, Time Difference, and Filtering -------------\n#import data\nP312 <- read.csv(\"./data/Baffle Study/BON_P3_CH12_20130419_filtered_merged.csv\")\nP334 <- read.csv(\"./data/Baffle Study/BON_P3_CH34_20130419_filtered_merged.csv\")\n\nP312 <- P312[ , c(3,5,6,8,10,11)]\nP334 <- P334[ , c(3,5,6,8,10,11)]\n\n# re-name variables\nnames(P312) <- c(\"name\", \"time\", \"code\", \"snr\", \"margin\", \"channel\")\nnames(P334) <- c(\"name\", \"time\", \"code\", \"snr\", \"margin\", \"channel\")\n\n# order dataframes via hydrophone name and tag code\nP312  <- P312[order(P312[,1], P312[,3]),]\nP334  <- P334[order(P334[,1], P334[,3]),]\n\n# calculate time difference between signals\ntimediff <- function(HpData, PingRate){\n        x <- rep(PingRate, length(HpData[,1])) \n        for(i in 2:(length(HpData[,1]))) {\n                if(HpData[i,3] != HpData[(i-1),3]){                    \n                        x[i] <- PingRate\n                }\n                else {\n                        x[i] <- HpData[(i),2] - HpData[i-1,2]                \n                }                                                      \n        }\n        HpData$diff <- x\n}\n\nPingRate <- 2.0\nP312$diff <- timediff(P312, PingRate)\nP334$diff <- timediff(P334, PingRate)\n\n\n#use time difference to filter out multi-path; filter for time of transects\nP312 <- subset(P312, P312[,7] > 0.1565)                   \nP312 <- P312[52560 < P312$time & P312$time < 55080,]\n\nP334 <- subset(P334, P334[,7] > 0.1565)\nP334 <- P334[52560 < P334$time & P334$time < 55080,]\n\ntotalData <- rbind(P312,P334)\n\n#round times in hydrophone data frame\nP312$time <- round(P312$time)\nP334$time <- round(P334$time)\n\n\n#rename time to gpstime\ncolnames(P312)[2] <- \"gpstime\"\ncolnames(P334)[2] <- \"gpstime\"\n\n\n# GPS Data Import and Time Conversions ------------------------------------\n\n#import data\ngps <- read.csv(\"./data/Baffle Study/gps_20130419.csv\")\n\n#convert time to seconds from midnight\ngps$gpstime <- sapply(strsplit(as.character(gps$gpstime), \":\"),\n                      function(x) {\n                              x <- as.numeric(x)\n                              x[1]*3600 + x[2]*60 + x[3]\n                      })\n\n#filter for time of transects\ngps <- gps[52560 < gps$gpstime & gps$gpstime < 55080 ,]\n\ndat <- left_join(gps, P312, by = \"gpstime\")\ndat <- dat[, c(1:3, 5:9)]\ntemp <- dat\ntemp$code <- \"none\"\n\n# the following \"snr\" is really distance in meters; bad form, but it was\n# the only way I could figure out how to plot it with true snr data in\n# facets\ntemp$snr <- temp$easting - 2387702 \ntemp$name <- \"boat\"\ndat <- dat[complete.cases(dat), ]\ndat <- rbind(dat, temp)\n\n# to make the scales the same, add a non-baffled point and make its snr\n# equal to max snr for baffled points; cover up this fake point when plotting\ndat[4542, ] <- dat[103, ]\ndat[4542, \"snr\"] <- max(dat[dat$name == \"P18SB\", \"snr\"])\n\n# name facets\nlevels(dat$name)[levels(dat$name) == \"P18SB\"] <- \"Baffled\"\nlevels(dat$name)[levels(dat$name) == \"P18SN\"] <- \"Non-Baffled\"\nlevels(dat$name)[levels(dat$name) == \"boat\"] <- \"Distance to 'Fish'\"\n\np <- ggplot(dat, aes(x=gpstime, y=(snr))) + geom_point(alpha=0.7, \n                                                       cex=1.5)         \np + facet_grid(name ~., scales = \"free_y\") + \n        ggtitle(\"Hydrophone Sensitivity Between \\nBaffled and Non-Baffled Hydrophones\") +\n        xlab(\"Time (seconds from midnight)\") + ylab(\"Distance (m)                         SNR                               SNR      \") +\n        theme(strip.text = element_text(face=\"bold\", size=rel(0.8)), \n              strip.background = element_rect(fill=\"grey90\", \n                                              colour=\"black\", size=1), \n              text = element_text(family = \"serif\"),\n              panel.background = element_rect(fill = \"aliceblue\"),\n              panel.grid.minor = element_blank(),\n              panel.grid.major = element_line(colour = \"grey80\"),\n              axis.text.x = element_text(size=rel(1.1), colour = \"black\"),\n              axis.text.y = element_text(size=rel(1.1), colour = \"black\"),\n              axis.title.x = element_text(size=rel(1), colour = \"black\", face = \"bold\"),\n              axis.title.y = element_text(size=rel(1), colour = \"black\", face = \"bold\"),\n              plot.title = element_text(face = \"bold\", size = rel(1.25))) +\n         annotate(\"pointrange\", x = 52594, y = 21.85, ymin = 21.85, ymax = 21.85,\n              colour = \"aliceblue\", size = 0.4)\n```\n\n<br><br><br>\n<br><br><br>\n\n```{r scatterplot2, echo=FALSE}\n# Calculate Euclidean Distances from Hydrophones to Tags ------------------\n\n#import hydrophone locations\npts <- read.csv(\"./data/Baffle Study/hphone_locations_20130419.csv\")\n\n#calculate difference in elevation between each hydrophone and the average tag elevation\npts$depthdiff <- 21.98 - pts[,4]                                #21.98 m = average tag elevation; forebay elevation =\n#24.96 m; average tag distance below boat = 2.977 m\n#add distance columns for each hydrophone to gps dataframe\ngps[c(\"distP312\", \"distP334\")] <- NA\n\n#calculate line-of-site distance from the boat to the hydrophone pair taking depth into consideration\ngpsnames <- list(\"312\", \"334\")\nsubnames <- list(P312, P334)\nfor(i in 1:length(pts[,1])){  \n        gps[,i+6] <- sqrt((gps$easting-pts[i,2])^2+(gps$northing-pts[i,3])^2 + (pts[i,5])^2) #line-of-sight distance\n        gpsnames[[i]] <- merge(subnames[[i]],gps)\n}\n\ngpsP312 <- gpsnames[[1]][,-14]                     #rename dataframes and select appropriate distance column\ngpsP334 <- gpsnames[[2]][,-13]\n\ncolnames(gpsP312)[13] <- \"distance\"\ncolnames(gpsP334)[13] <- \"distance\"\n\n#plot distance vs baffled/non-baffled on same graph\n#The following plots show a nice comparison between baff/non-baff over distance - easy to see the advantage \n#having a baffle on the hydrophone in noisey conditions\n\n\np <- ggplot(gpsP312, aes(x=distance, y=name)) + \n        geom_point(position=position_jitter(), color = \"white\", alpha = 0.8) \n\np + ggtitle(\"Comparing Fish Detections\\nBetween Shielded and Non-Shielded Sensors\") +\n        xlab(\"Distance of Fish from Receiver (meters)\") + \n        ylab(\"Fish Detections\") + \n        theme(axis.title.x=element_text(size=14, face='bold'), \n              axis.title.x = element_text(size=rel(1), colour = \"black\", \n                                          face = \"bold\"),\n        axis.line = element_line(color=\"black\"),\n        text = element_text(family = \"serif\"),\n        title = element_text(size = 16, face='bold'),             \n        axis.text.x = element_text(size=rel(1.25), colour = \"black\"),\n        axis.text.y = element_text(size=rel(1.25), colour = \"black\"),\n        plot.title = element_text(face = \"bold\", size = rel(1)),\n        panel.background = element_rect(fill = \"black\"),\n        panel.grid.minor = element_blank(),\n        panel.grid.major = element_line(colour = \"grey80\")) +\n        scale_y_discrete(breaks=c(\"P18SN\", \"P18SB\"), labels=c(\"Not Baffled\", \"Baffled\"))\n```\n<br><br><br>\n<br><br><br>\n\n###Correlation Matrix\nMulticollinearity (two or more highly correlated variables) can cause problems when building multiple regression models.  An early step in data exploration is creating a correlation matrix.  Following is one way to visualize such a matrix, and quickly spot variables that are highly correlated.  The more highly correlated two variables are, the more oblong the shape where the two intersect.  If the shape is blue, they are positively correlated, if they are red, they are negatively correlated.  Two variables with no correlation would show up as a grey circle.  \n<br />\nThe data set used comes from a paper by J. W. Longley (1967) which demonstrates highly correlated macroeconomic indicators.\n\n```{r correlation_matrix, echo=FALSE}\nlibrary(corrplot)\nlibrary(gplots)\nnames(longley) <- c(\"GNP.def\", \"GNP\", \"Jobless\", \"Military\", \"Population\", \n                    \"Year\", \"Employed\")\ncorrplot.mixed(corr=cor(longley, use = \"complete.obs\"),\n                        upper = \"ellipse\", t1.pos = \"lt\", diag = \"n\",\n                        col = colorpanel(50, \"red\", \"gray60\", \"blue4\"))\n\n```\n<br><br><br>\n<br><br><br>\n\n###Heat Map\nHeat maps are a useful way to represent matrix data, facilitating the discovery of clusters or outliers.  The following heatmap shows daily weather-related measurements taken in Portland, Oregon November 2011. Hover over a cell to get a popup showing the row, column, and value.\n\n```{r heatmap, echo=FALSE, cache=FALSE}\nlibrary(gplots)\nlibrary(RColorBrewer)\nweather <- read.csv(\"./data/Heatmap/QCLCD_PDX_weather_edit.csv\",\n                    stringsAsFactor = FALSE)\nlibrary(lubridate)\nweather$YearMonthDay <- day(ymd(weather$YearMonthDay))\nnames(weather)[1] <- \"Day\"\n\nlibrary(d3heatmap)\nd3heatmap(weather[, -1], scale=\"column\", colors=\"YlOrRd\", cexRow = 1,\n          show_grid = TRUE, Rowv = FALSE)\n```\n<br><br><br>\n<br><br><br>\n\n\n\nTABLES\n---\n<hr style=\"height:1px;border:none;color:#333;background-color:#333;\" />\n\nWhile using visualization techniques usually makes the process of finding trends easier, sometimes it is necessary to present a table.  The following table is fairly large (2460 rows, 14 columns), and presenting it in a web page requires some \"folding\" technique.  Here you can select the number of rows you want to see, order by clicking on the arrows at the top of the appropriate column, or search for a particular subset.  Try selecting one of the \"General.Causes\", e.g. \"Debris Burning\", and it will filter the table to just those instances.  The total number of rows remaining after filtering are shown at the bottom of the table.\n\n```{r interactive_table, echo=FALSE, cache=FALSE}\nlibrary(DT)\n# import Oregon forest fire data\ndat <- read.csv(\"./data/Table_fires/FireList_edit.csv\",\n                stringsAsFactors = FALSE)\n# convert to lat/long to DMS\nlibrary(sp)\ndat$Latitude <- as.numeric(char2dms(dat$Latitude, \n                                    chd = \"°\", chm = \"'\", chs = \"\\\"\"))\ndat$Longitude <- as.numeric(char2dms(dat$Longitude, \n                                     chd = \"°\", chm = \"'\", chs = \"\\\"\"))\ndat <- dat[complete.cases(dat), ]\ndat$Latitude <- round(dat$Latitude, 2)\ndat$Longitude <- round(dat$Longitude, 2)\n\ndatatable(dat[, -c(2, 4, 6, 9, 13)], options = list(pageLength = 5), \n          rownames = FALSE, caption = \"Oregon Forest Fires 2013-2015\")\n```\n<br><br><br>\n<br><br><br>\n\nINTERACTIVE APPLICATIONS\n---\n<hr style=\"height:1px;border:none;color:#333;background-color:#333;\" />\n\n###Shiny App\nSometimes we want more interactivity than we get on a single, interactive graph.  That's where full-blown applications come in.  I build applications with Shiny which brings to bare all the tools and packages available in R.  To see an example of one of my Shiny apps,  go here: <a href=\"https://gwbatten.shinyapps.io/engineDisplacement\" target=\"_blank\">Shiny App</a>\n\n\n###Slides\nPresentations can be built in R with \"R Presentations\" or \"Slidify\", which allow you to author HTML5 presentations.  One advantage of these packages is that R code is embedded in the presentation, so any changes in code are easily re-rendered.  For one of my examples, go here: <a href=\"https://rpubs.com/gwbatten/DataScienceCapstonePresentation\" target=\"_blank\">Data Science Capstone Presentation</a>\n<br><br><br>\n<br><br><br>\n\nBIBLIOGRAPHY\n---\n<hr style=\"height:1px;border:none;color:#333;background-color:#333;\" />\n\nAnderson, Edgar, _The irises of the Gaspe Peninsula_, Bulletin of the American Iris Society, 59, 2--5 (1935).\n\nLongley, J. W. _An appraisal of least-squares programs from the point of view of the user_. Journal of the American Statistical Association 62, 819--841 (1967).\n\nLusseau, D., K. Schneider, O. J. Boisseau, P. Haase, E. Slooten, and S. M. Dawson, _The bottlenose dolphin community of Doubtful Sound features a large proportion of long-lasting associations_, Behavioral Ecology and Sociobiology 54, 396--405 (2003).\n\n",
    "created" : 1470422974534.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "39|48|143|0|\n",
    "hash" : "2966060199",
    "id" : "2DE7BEF5",
    "lastKnownWriteTime" : 1470424378,
    "last_content_update" : 1470424378112,
    "path" : "C:/Users/George/Desktop/George/R PROJECTS/Data_Visualization_Portfolio/Data_Visualization_Portfolio.Rmd",
    "project_path" : "Data_Visualization_Portfolio.Rmd",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}